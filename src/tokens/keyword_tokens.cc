#include <vector>
#include "./keyword_tokens.hh"

namespace tokens {
    using namespace std;
    
    // Keyword Token Vector
    vector<KeywordToken> keywords_vector() {
        const vector<KeywordToken> keywords = {
            ABSTRACT_TOKEN,
            ANY_TOKEN,
            AS_TOKEN,
            ASYNC_TOKEN,
            AWAIT_TOKEN,
            BOX_TOKEN,
            BREAK_TOKEN,
            CASE_TOKEN,
            CATCH_TOKEN,
            CONST_TOKEN,
            CONTINUE_TOKEN,
            DEFER_TOKEN,
            DEINIT_TOKEN,
            DO_TOKEN,
            DYN_TOKEN,
            DYNAMIC_TOKEN,
            ELSE_TOKEN,
            ENUM_TOKEN,
            EXPORT_TOKEN,
            EXTERN_TOKEN,
            FALSE_TOKEN,
            FINAL_TOKEN,
            FN_TOKEN,
            FUNC_TOKEN,
            FUNCTION_TOKEN,
            FOR_TOKEN,
            IF_TOKEN,
            IMPL_TOKEN,
            IMPORT_TOKEN,
            INIT_TOKEN,
            INTERFACE_TOKEN,
            IN_TOKEN,
            LET_TOKEN,
            MACRO_TOKEN,
            MATCH_TOKEN,
            MOD_TOKEN,
            MODULE_TOKEN,
            MOVE_TOKEN,
            MUT_TOKEN,
            MUTABLE_TOKEN,
            NIL_TOKEN,
            NULL_TOKEN,
            OVERRIDE_TOKEN,
            PACKAGE_TOKEN,
            PRIV_TOKEN,
            PRIVATE_TOKEN,
            PUB_TOKEN,
            PUBLIC_TOKEN,
            RAW_TOKEN,
            REF_TOKEN,
            RETURN_TOKEN,
            SELF_TOKEN,
            STATIC_TOKEN,
            STRUCT_TOKEN,
            SUPER_TOKEN,
            SWITCH_TOKEN,
            THROW_TOKEN,
            TRAIT_TOKEN,
            TRUE_TOKEN,
            TRY_TOKEN,
            TYPE_TOKEN,
            TYPEDEF_TOKEN,
            TYPEOF_TOKEN,
            UNION_TOKEN,
            UNSAFE_TOKEN,
            USE_TOKEN,
            UNSIZED_TOKEN,
            VAR_TOKEN,
            VARIABLE_TOKEN,
            WHERE_TOKEN,
            WHILE_TOKEN,
        };
    
        return keywords;
    }
}